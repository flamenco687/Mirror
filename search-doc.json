[{"title":"Mirror","type":0,"sectionRef":"#","url":"api/Mirror","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Mirror","url":"api/Mirror#types","content":" "},{"title":"NonSupportedValues​","type":1,"pageTitle":"Mirror","url":"api/Mirror#NonSupportedValues","content":"&lt;/&gt; type NonSupportedValues = {[Reflex]: any} This type is only used by a shared table made to hold values which are not supported by attributes and for such reason must be requested by the client through RemoteFunction  "},{"title":"Reflex​","type":1,"pageTitle":"Mirror","url":"api/Mirror#Reflex","content":"&lt;/&gt; type Reflex = Configuration  Reflexes are containers that simply hold a value (using roblox attributes) in a studio-instance. The reflexes of a mirror represent that mirror's Mirror.Data in an instance tree so the client can easily access primitive values by making use of :GetAttribute(). If a reflex's value is nil it means that the real value is being held by the server because it cannot be set as an attribute value. "},{"title":"Properties​","type":1,"pageTitle":"Mirror","url":"api/Mirror#properties","content":" "},{"title":"Data​","type":1,"pageTitle":"Mirror","url":"api/Mirror#Data","content":"&lt;/&gt; Mirror.Data: Proxy  "},{"title":"Functions​","type":1,"pageTitle":"Mirror","url":"api/Mirror#functions","content":" "},{"title":"Get​","type":1,"pageTitle":"Mirror","url":"api/Mirror#Get","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Mirror.Get(Name: string) → Mirror Returns an existing mirror  "},{"title":"new​","type":1,"pageTitle":"Mirror","url":"api/Mirror#new","content":"Constructor &lt;/&gt; Mirror.new( Name: string, Origin: table?,-- Optional table to work as a base for the mirror's Mirror.Data Settings: MirrorSettings?-- Additional settings such as whitelist, visibility... ) → Mirror "},{"title":"Types","type":1,"pageTitle":"Mirror","url":"api/Mirror##","content":""},{"title":"​","type":1,"pageTitle":"Mirror","url":"api/Mirror#MirrorSettings","content":"interface MirrorSettings { Whitelist: {[number]: Player }? IsPrivate: boolean? }  Constructs a new mirror caution The constructor function is used by both client and server but it should only directly be called by the server to create new mirrors. The client will automatically retrieve all mirror settings and construct the mirror internally when requesting a mirror with Mirror.Get  "},{"title":"AddWhitelist​","type":1,"pageTitle":"Mirror","url":"api/Mirror#AddWhitelist","content":"This item only works when running on the server. Server &lt;/&gt; Mirror:AddWhitelist(PlayerToAdd: Player | Array&lt;Player &gt;) → () Adds player or array of players to the Mirror._Whitelist  "},{"title":"RemoveWhitelist​","type":1,"pageTitle":"Mirror","url":"api/Mirror#RemoveWhitelist","content":"This item only works when running on the server. Server &lt;/&gt; Mirror:RemoveWhitelist(PlayerToRemove: Player | Array&lt;Player &gt;) → () Removes player or array of players from the Mirror._Whitelist  "},{"title":"Set​","type":1,"pageTitle":"Mirror","url":"api/Mirror#Set","content":"This item only works when running on the server. Server &lt;/&gt; Mirror:Set(NewData: table) → () Overrides the current Mirror.Data and sets it to the passed table "}]